<?php

namespace Drupal\openstack_queues\Form;

use Drupal\Core\Form\ConfigFormBase;
use Drupal\Core\Form\FormStateInterface;

class OpenstackQueuesSettingsForm extends ConfigFormBase {

  /**
   * @var array $editableConfig
   */
  protected $editableConfig = [];

  /**
   * Gets the configuration names that will be editable.
   *
   * @return array
   *   An array of configuration object names that are editable if called in
   *   conjunction with the trait's config() method.
   */
  protected function getEditableConfigNames() {
    return $this->editableConfig;
  }

  /**
   * Returns a unique string identifying the form.
   *
   * @return string
   *   The unique string identifying the form.
   */
  public function getFormId() {
    return 'openstack_queues_settings_form';
  }

  public function buildForm(array $form, FormStateInterface $form_state, $queue = NULL) {
    $config_key = ($queue) ? $queue : 'default';
    $this->editableConfig = ['openstack_queues.settings.' . $config_key];
    $settings = $this->config('openstack_queues.settings.' . $config_key);
    $form_state->setValue('config_key', $config_key);

    $form['client_id'] = [
      '#type' => 'textfield',
      '#title' => t('Client ID'),
      '#description' => t('A UUID to identify this site.'),
      '#default_value' => $settings->get('client_id'),
      '#required' => TRUE,
    ];

    $form['auth_url'] = [
      '#type' => 'textfield',
      '#title' => t('Authorization URL'),
      '#description' => t('The Openstack Identity service URL.'),
      '#default_value' => $settings->get('auth_url'),
      '#required' => TRUE,
    ];

    $form['region'] = [
      '#type' => 'textfield',
      '#title' => t('Region'),
      '#description' => t('The Openstack Region where the service is located.'),
      '#default_value' => $settings->get('region'),
      '#required' => TRUE,
    ];

    $form['prefix'] = [
      '#type' => 'textfield',
      '#title' => t('Prefix'),
      '#description' => t('An optional prefix to use to namespace this queue within the service. Setting this is recommended if you have multiple applications using the service.'),
      '#default_value' => $settings->get('prefix'),
    ];

    $form['credentials'] = [
      '#type' => 'details',
      '#title' => t('Credentials'),
      '#open' => TRUE,
    ];

    $form['credentials']['username'] = [
      '#type' => 'textfield',
      '#title' => t('Username'),
      '#default_value' => $settings->get('credentials.username'),
      '#required' => TRUE,
    ];

    $form['credentials']['apiKey'] = [
      '#type' => 'textfield',
      '#title' => t('API Key'),
      '#default_value' => $settings->get('credentials.apiKey'),
      '#required' => TRUE,
    ];

    return parent::buildForm($form, $form_state);
  }

  public function validateForm(array &$form, FormStateInterface $form_state) {
    parent::validateForm($form, $form_state); // TODO: Change the autogenerated stub
  }

  public function submitForm(array &$form, FormStateInterface $form_state) {
    $config_key = $form_state->getValue('config_key', 'default');
    $this->editableConfig = ['openstack_queues.settings.' . $config_key];
    $this->config('openstack_queues.settings.' . $config_key)
      ->set('client_id', $form_state->getValue('client_id'))
      ->set('auth_url', $form_state->getValue('auth_url'))
      ->set('region', $form_state->getValue('region'))
      ->set('prefix', $form_state->getValue('prefix'))
      ->set('credentials.username', $form_state->getValue('username'))
      ->set('credentials.apiKey', $form_state->getValue('apiKey'))
      ->save();
    parent::submitForm($form, $form_state);
  }
}